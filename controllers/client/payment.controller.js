const { url } = require('inspector');
const paymentModel = require('../../modal/client/payment.model');
const codModel = require('../../modal/client/cod.model');
const momoModel = require('../../modal/client/momo.model');
const axios = require('axios');
const db = require('../../config/database');
const crypto = require('crypto');

const secretKey = 'K951B6PE1waDMi640xX08PD3vg6EkVlz'; // key test MoMo
const accessKey = 'F8BBA842ECF85'; // key test MoMo
  // ‚úÖ Ghi nh·∫≠n COD khi ƒë·∫∑t h√†ng
module.exports.payOrderCODController = async (req, res) => {
  const orderId = req.params.id;
  try {
    const result = await codModel.payOrderCOD(orderId);
    res.json({ success: true, message: '‚úÖ Thanh to√°n COD ƒë∆∞·ª£c ghi nh·∫≠n', data: result });
  } catch (err) {
    console.error('‚ùå L·ªói payOrderCODController:', err);
    res.status(400).json({ success: false, message: err.message });
  }
};


module.exports.callback = async (req, res) => {
  console.log("üì• [MoMo Callback] D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);

  const {
    orderId,    // momo_order_id
    amount,
    resultCode,
    message,
    transId,
  } = req.body;

  if (!orderId) {
    return res.status(200).json({
      success: false,
      message: "‚ùå Thi·∫øu orderId trong d·ªØ li·ªáu callback"
    });
  }

  try {
    if (resultCode === 0) {
      // üîç 1. T√¨m ƒë∆°n h√†ng
      const [orders] = await db.query(
        'SELECT * FROM don_hang WHERE momo_order_id = ?',
        [orderId]
      );

      if (!orders.length) {
        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi momo_order_id: ${orderId}`);
        return res.status(200).json({
          success: false,
          message: "‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"
        });
      }

      const order = orders[0];
      const idDonHang = order.id_don_hang;

      // ‚úÖ Ki·ªÉm tra s·ªë ti·ªÅn MoMo tr·∫£ c√≥ kh·ªõp kh√¥ng
      if (parseInt(amount) !== parseInt(order.tong_gia)) {
        console.error(`‚ùå S·ªë ti·ªÅn kh√¥ng kh·ªõp. MoMo g·ª≠i: ${amount}, h·ªá th·ªëng: ${order.tong_gia}`);
        return res.status(200).json({
          success: false,
          message: "‚ùå S·ªë ti·ªÅn thanh to√°n kh√¥ng kh·ªõp"
        });
      }

      // üí≥ 2. X·ª≠ l√Ω thanh to√°n
      const [existing] = await db.query(
        'SELECT * FROM thanh_toan WHERE id_don_hang = ? AND phuong_thuc = ?',
        [idDonHang, 'MoMo']
      );

      if (!existing.length) {
        await db.query(
          `INSERT INTO thanh_toan
          (id_don_hang, so_tien, phuong_thuc, trang_thai, ngay_thanh_toan)
          VALUES (?, ?, 'MoMo', 'ƒê√£ thanh to√°n', NOW())`,
          [idDonHang, amount]
        );
        console.log('‚úÖ Insert thanh to√°n MoMo');
      } else {
        await db.query(
          `UPDATE thanh_toan
          SET trang_thai = 'ƒê√£ thanh to√°n', ngay_thanh_toan = NOW()
          WHERE id_don_hang = ? AND phuong_thuc = 'MoMo'`,
          [idDonHang]
        );
        console.log('üîÅ Update thanh to√°n MoMo');
      }

      // üì¶ 3. C·∫≠p nh·∫≠t ƒë∆°n h√†ng
      await db.query(
        `UPDATE don_hang
        SET trang_thai = ?, trang_thai_thanh_toan = ?, phuong_thuc_thanh_toan = ?
        WHERE id_don_hang = ?`,
        ['ƒê√£ giao', 'ƒê√£ thanh to√°n', 'MoMo', idDonHang]
      );
      console.log('üì¶ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng');

      // üìù 4. L∆∞u l·ªãch s·ª≠ ƒë∆°n h√†ng
      await db.query(
        `INSERT INTO lich_su_don_hang (id_don_hang, thoi_gian, trang_thai, mo_ta)
        VALUES (?, NOW(), ?, ?)`,
        [idDonHang, 'ƒê√£ giao', 'Thanh to√°n MoMo th√†nh c√¥ng']
      );

      return res.status(200).json({
        success: true,
        message: "‚úÖ ƒê√£ x·ª≠ l√Ω callback MoMo th√†nh c√¥ng"
      });
    } else {
      // ‚ùå X·ª≠ l√Ω tr∆∞·ªùng h·ª£p thanh to√°n th·∫•t b·∫°i
      console.warn(`‚ùå Thanh to√°n th·∫•t b·∫°i t·ª´ MoMo. resultCode=${resultCode}, message=${message}`);
      return res.status(200).json({
        success: false,
        message: `‚ùå Thanh to√°n th·∫•t b·∫°i t·ª´ MoMo: ${message}`,
        resultCode
      });
    }
  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω callback MoMo:', error);
    return res.status(200).json({
      success: false,
      message: "‚ùå L·ªói server khi x·ª≠ l√Ω callback MoMo",
      error: error.message
    });
  }
};


  // ‚úÖ X√°c nh·∫≠n COD (khi nh√¢n vi√™n ho·∫∑c kh√°ch check)
module.exports.confirmCod = async (req, res) => {
  try {
    const { id_don_hang } = req.body;
    const userId = req.user.id; // L·∫•y t·ª´ token

    if (!id_don_hang) {
      return res.status(400).json({ success: false, message: '‚ùå Thi·∫øu ID ƒë∆°n h√†ng' });
    }

    const success = await paymentModel.confirmCodPayment(id_don_hang, userId);

    if (!success) {
      return res.status(404).json({
        success: false,
        message: '‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn'
      });
    }

    res.status(200).json({
      success: true,
      message: '‚úÖ X√°c nh·∫≠n COD th√†nh c√¥ng'
    });
  } catch (err) {
    console.error('‚ùå L·ªói confirmCod:', err);
    res.status(500).json({
      success: false,
      message: '‚ùå L·ªói server khi x√°c nh·∫≠n COD',
      error: err.message
    });
  }
};


// ‚úÖ Check tr·∫°ng th√°i thanh to√°n MoMo
module.exports.statusPayment = async (req, res) => {
  try {
    const { id_don_hang } = req.body;
    const orderId = id_don_hang;
    const requestId = id_don_hang;

    const rawSignature = `accessKey=${accessKey}&orderId=${orderId}&partnerCode=MOMO&requestId=${requestId}`;
    const signature = crypto.createHmac('sha256', secretKey).update(rawSignature).digest('hex');

    const requestBody = {
      partnerCode: "MOMO",
      requestId,
      orderId,
      signature,
      lang: 'vi'
    };

    const response = await axios.post('https://test-payment.momo.vn/v2/gateway/api/query', requestBody, {
      headers: { 'Content-Type': 'application/json' }
    });

    res.status(200).json(response.data);
  } catch (error) {
    console.error('‚ùå L·ªói truy v·∫•n tr·∫°ng th√°i thanh to√°n:', error);
    res.status(500).json({
      statusCode: 500,
      message: "Server error",
      error: error.message
    });
  }
};
