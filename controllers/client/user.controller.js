const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const User = require('../../modal/client/user.model');

const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/;

const userController = {
    // ƒêƒÉng k√Ω
    register: async (req, res) => {
        const { email, mat_khau, ten, so_dien_thoai } = req.body;
        console.log('üì• [register] Body:', req.body);

        try {
            const userExists = await User.findByEmail(email);
            if (userExists) {
                console.log('‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i:', email);
                return res.status(400).json({ error: 'Email ƒë√£ t·ªìn t·∫°i' });
            }

            if (!strongPasswordRegex.test(mat_khau)) {
                console.log('‚ö†Ô∏è M·∫≠t kh·∫©u y·∫øu');
                return res.status(400).json({
                    error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.'
                });
            }

            const hashedPassword = await bcrypt.hash(mat_khau, 10);
            const verificationCode = String(Math.floor(100000 + Math.random() * 900000)).padStart(6, '0');
            console.log('üìå [register] M√£ x√°c minh t·∫°o ra:', verificationCode);

            await User.create({
                email,
                mat_khau: hashedPassword,
                ten,
                so_dien_thoai,
                ma_xac_minh: verificationCode,
                ngay_tao: new Date()
            });

            console.log('üìß G·ª≠i email x√°c minh ƒë·∫øn:', email);
            await transporter.sendMail({
                from: process.env.EMAIL_USER,
                to: email,
                subject: 'X√°c minh t√†i kho·∫£n',
                html: `<h3>Xin ch√†o ${ten || email}!</h3>
                       <p>M√£ x√°c minh c·ªßa b·∫°n l√†: <b>${verificationCode}</b></p>`
            });

            res.json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh.' });
        } catch (err) {
            console.error('‚ùå L·ªói [register]:', err);
            res.status(500).json({ error: err.message });
        }
    },

    // X√°c minh email
    verifyEmail: async (req, res) => {
        const { email, ma_xac_minh } = req.query;
        console.log('üì• [verifyEmail] Query:', req.query);

        try {
            const user = await User.findByEmail(email);
            if (!user) {
                console.log('‚ùå Email kh√¥ng t·ªìn t·∫°i:', email);
                return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });
            }

            if (user.ma_xac_minh !== ma_xac_minh) {
                console.log('‚ùå M√£ x√°c minh sai');
                return res.status(400).json({ error: 'M√£ x√°c minh kh√¥ng ƒë√∫ng' });
            }

            await User.update(user.id_nguoi_dung, {
                xac_thuc_email: 1,
                ma_xac_minh: null
            });

            console.log('‚úÖ Email ƒë√£ x√°c minh:', email);
            res.json({ message: 'X√°c minh email th√†nh c√¥ng' });
        } catch (err) {
            console.error('‚ùå L·ªói [verifyEmail]:', err);
            res.status(500).json({ error: err.message });
        }
    },

    // ƒêƒÉng nh·∫≠p
    login: async (req, res) => {
        const { email, mat_khau } = req.body;
        console.log('üì• [login] Body:', req.body);

        try {
            const user = await User.findByEmail(email);
            if (!user) {
                console.log('‚ùå Email kh√¥ng t·ªìn t·∫°i:', email);
                return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });
            }
            if (user.xac_thuc_email === 0) {
                console.log('‚ö†Ô∏è T√†i kho·∫£n ch∆∞a x√°c minh email');
                return res.status(403).json({ error: 'T√†i kho·∫£n ch∆∞a x√°c minh email' });
            }

            const isMatch = await bcrypt.compare(mat_khau, user.mat_khau);
            if (!isMatch) {
                console.log('‚ùå Sai m·∫≠t kh·∫©u');
                return res.status(400).json({ error: 'Sai m·∫≠t kh·∫©u' });
            }

            const token = jwt.sign({ id: user.id_nguoi_dung }, process.env.JWT_SECRET, { expiresIn: '7d' });
            console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:', email);
            res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', token });
        } catch (err) {
            console.error('‚ùå L·ªói [login]:', err);
            res.status(500).json({ error: err.message });
        }
    },

    // C·∫≠p nh·∫≠t th√¥ng tin
    updateProfile: async (req, res) => {
        const userId = req.user.id;
        const { ten, so_dien_thoai, avatar, gioi_tinh, ngay_sinh } = req.body;
        console.log('üì• [updateProfile] Body:', req.body);

        try {
            await User.update(userId, { ten, so_dien_thoai, avatar, gioi_tinh, ngay_sinh });
            console.log('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng cho user ID:', userId);
            res.json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng' });
        } catch (err) {
            console.error('‚ùå L·ªói [updateProfile]:', err);
            res.status(500).json({ error: err.message });
        }
    },

    // ƒê·ªïi m·∫≠t kh·∫©u
    changePassword: async (req, res) => {
        const userId = req.user.id;
        const { oldPassword, newPassword } = req.body;
        console.log('üì• [changePassword] Body:', req.body);

        try {
            const user = await User.findById(userId);
            const isMatch = await bcrypt.compare(oldPassword, user.mat_khau);
            if (!isMatch) {
                console.log('‚ùå M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng');
                return res.status(400).json({ error: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng' });
            }

            const hashedPassword = await bcrypt.hash(newPassword, 10);
            await User.update(userId, { mat_khau: hashedPassword });
            console.log('‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho user ID:', userId);
            res.json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });
        } catch (err) {
            console.error('‚ùå L·ªói [changePassword]:', err);
            res.status(500).json({ error: err.message });
        }
    },

    // Qu√™n m·∫≠t kh·∫©u
    forgotPassword: async (req, res) => {
        const { email } = req.body;
        console.log('üì• [forgotPassword] Email:', email);

        try {
            const user = await User.findByEmail(email);
            if (!user) {
                console.log('‚ùå Email kh√¥ng t·ªìn t·∫°i:', email);
                return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });
            }

            const token = jwt.sign({ id: user.id_nguoi_dung }, process.env.JWT_SECRET, { expiresIn: '15m' });
            const resetLink = `http://localhost:3000/reset-password?token=${token}`;

            await transporter.sendMail({
                from: process.env.EMAIL_USER,
                to: email,
                subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
                html: `<p>Nh·∫•n v√†o link ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: <a href="${resetLink}">${resetLink}</a></p>`
            });

            console.log('‚úÖ Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ g·ª≠i ƒë·∫øn:', email);
            res.json({ message: 'Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i' });
        } catch (err) {
            console.error('‚ùå L·ªói [forgotPassword]:', err);
            res.status(500).json({ error: err.message });
        }
    },

    // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
    resetPassword: async (req, res) => {
        const { token, newPassword } = req.body;
        console.log('üì• [resetPassword] Body:', req.body);

        try {
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            const hashedPassword = await bcrypt.hash(newPassword, 10);
            await User.update(decoded.id, { mat_khau: hashedPassword });

            console.log('‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho user ID:', decoded.id);
            res.json({ message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' });
        } catch (err) {
            console.error('‚ùå L·ªói [resetPassword]:', err);
            res.status(400).json({ error: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
        }
    }
};

module.exports = userController;
