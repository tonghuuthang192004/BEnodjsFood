const md5 = require('md5');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const User = require('../../modal/client/user.model');
const bcrypt = require('bcrypt');

// ‚úâÔ∏è C·∫•u h√¨nh g·ª≠i mail
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// üìã Regex ki·ªÉm tra m·∫≠t kh·∫©u m·∫°nh
const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/;

const userController = {
  // üìù ƒêƒÉng k√Ω
  register: async (req, res) => {
    const { email, mat_khau, ten, so_dien_thoai } = req.body;

    try {
      const userExists = await User.findByEmail(email);
      if (userExists) {
        return res.status(400).json({ error: 'Email ƒë√£ t·ªìn t·∫°i' });
      }

      if (!strongPasswordRegex.test(mat_khau)) {
        return res.status(400).json({
          error: 'M·∫≠t kh·∫©u y·∫øu (√≠t nh·∫•t 8 k√Ω t·ª±, ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát)'
        });
      }

      const hashedPassword = await bcrypt.hash(mat_khau, 10);
      const verificationCode = String(Math.floor(100000 + Math.random() * 900000));

      await User.create({
        id_vai_tro: 2, // User m·∫∑c ƒë·ªãnh
        email,
        mat_khau: hashedPassword,
        ten,
        so_dien_thoai,
        ma_xac_minh: verificationCode
      });

      await transporter.sendMail({
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'X√°c minh t√†i kho·∫£n',
        html: `<p>M√£ x√°c minh c·ªßa b·∫°n: <b>${verificationCode}</b></p>`
      });

      res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng, ki·ªÉm tra email ƒë·ªÉ x√°c minh.' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi ƒëƒÉng k√Ω' });
    }
  },

  // ‚úÖ X√°c minh email
  verifyEmail: async (req, res) => {
    const { email, ma_xac_minh } = req.body;

    try {
      const user = await User.findByEmail(email);
      if (!user) return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });

      if (user.ma_xac_minh !== ma_xac_minh) {
        return res.status(400).json({ error: 'M√£ x√°c minh kh√¥ng ƒë√∫ng' });
      }

      await User.verifyEmail(user.id_nguoi_dung);

      const token = jwt.sign({ id: user.id_nguoi_dung }, process.env.JWT_SECRET, { expiresIn: '7d' });

      res.json({ message: 'X√°c minh th√†nh c√¥ng', token, user });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi x√°c minh email' });
    }
  },

  // üîì ƒêƒÉng nh·∫≠p
 login: async (req, res) => {
    const { email, mat_khau } = req.body;

    try {
      const user = await User.findByEmail(email);
      if (!user) return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });

      if (!user.xac_thuc_email) {
        return res.status(403).json({ error: 'T√†i kho·∫£n ch∆∞a x√°c minh email' });
      }

      const isMatch = await bcrypt.compare(mat_khau, user.mat_khau);
      if (!isMatch) return res.status(400).json({ error: 'Sai m·∫≠t kh·∫©u' });

      const token = jwt.sign({ id: user.id_nguoi_dung }, process.env.JWT_SECRET, { expiresIn: '7d' });

      res.json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', token, user });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi ƒëƒÉng nh·∫≠p' });
    }
  },


  // ‚úèÔ∏è C·∫≠p nh·∫≠t t√™n & s·ªë ƒëi·ªán tho·∫°i
  updateProfile: async (req, res) => {
    const userId = req.user.id;
    const { ten, so_dien_thoai } = req.body;

    try {
      await User.updateProfile(userId, ten, so_dien_thoai);
      res.json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi c·∫≠p nh·∫≠t th√¥ng tin' });
    }
  },

  // üñº C·∫≠p nh·∫≠t avatar
  uploadAvatar: async (req, res) => {
    try {
      const userId = req.user.id;
      const avatarPath = `/uploads/avatars/${req.file.filename}`;
      await User.updateAvatar(userId, avatarPath);

      res.json({ success: true, avatarUrl: avatarPath, message: 'C·∫≠p nh·∫≠t avatar th√†nh c√¥ng' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ success: false, message: 'L·ªói server khi upload avatar' });
    }
  },

  // üîí ƒê·ªïi m·∫≠t kh·∫©u
  changePassword: async (req, res) => {
    const userId = req.user.id;
    const { oldPassword, newPassword } = req.body;

    try {
      const user = await User.findById(userId);
      const isMatch = await bcrypt.compare(oldPassword, user.mat_khau);
      if (!isMatch) return res.status(400).json({ error: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng' });

      const hashedPassword = await bcrypt.hash(newPassword, 10);
      await User.updatePassword(userId, hashedPassword);

      res.json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi ƒë·ªïi m·∫≠t kh·∫©u' });
    }
  },

  // üîë Qu√™n m·∫≠t kh·∫©u
  forgotPassword: async (req, res) => {
    const { email } = req.body;

    try {
      const user = await User.findByEmail(email);
      if (!user) return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });

      const otpCode = String(Math.floor(100000 + Math.random() * 900000));
      const otpExpires = Date.now() + 5 * 60 * 1000;

      await User.updateOtp(user.id_nguoi_dung, otpCode, otpExpires);

      await transporter.sendMail({
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u',
        html: `<p>M√£ OTP c·ªßa b·∫°n: <b>${otpCode}</b></p>`
      });

      res.json({ message: 'ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi g·ª≠i OTP' });
    }
  },

  // üîë X√°c minh OTP
  verifyOtp: async (req, res) => {
    const { email, otpCode } = req.body;

    try {
      const user = await User.findByEmail(email);
      if (!user) return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });

      if (user.ma_xac_minh !== otpCode || Date.now() > user.otp_expires) {
        return res.status(400).json({ error: 'M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
      }

      await User.clearOtp(user.id_nguoi_dung);
      res.json({ message: 'X√°c minh OTP th√†nh c√¥ng' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi x√°c minh OTP' });
    }
  },

  // üîë Reset m·∫≠t kh·∫©u
  resetPassword: async (req, res) => {
    const { email, newPassword } = req.body;

    try {
      const user = await User.findByEmail(email);
      if (!user) return res.status(404).json({ error: 'Email kh√¥ng t·ªìn t·∫°i' });

      const hashedPassword = await bcrypt.hash(newPassword, 10);
      await User.updatePassword(user.id_nguoi_dung, hashedPassword);

      res.json({ message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u' });
    }
  },

  // üìÑ L·∫•y th√¥ng tin user hi·ªán t·∫°i
  getCurrentUser: async (req, res) => {
    try {
      const user = await User.findById(req.user.id);
      if (!user) return res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
      res.json({ success: true, user });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'L·ªói server khi l·∫•y th√¥ng tin user' });
    }
  }
};

module.exports = userController;
