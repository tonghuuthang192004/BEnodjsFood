const orderModel = require('../../modal/client/order.model');
const cartModel = require('../../modal/client/cart.model');
const crypto = require('crypto');
const axios = require('axios');
const db = require("../../config/database")
const moment = require("moment")
const secretKey = 'K951B6PE1waDMi640xX08PD3vg6EkVlz';
const accessKey = 'F8BBA842ECF85';

// üì• L·∫•y danh s√°ch ƒë∆°n h√†ng (c√≥ l·ªçc tr·∫°ng th√°i)
module.exports.getOrdersByUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const { status } = req.query; // ?status=ƒê√£ giao
    const orders = await orderModel.getOrdersByUserId(userId, status);

    res.json({ success: true, message: 'Danh s√°ch ƒë∆°n h√†ng', data: orders });
  } catch (err) {
    console.error('‚ùå L·ªói getOrdersByUser:', err);
    res.status(500).json({ success: false, message: 'L·ªói server l·∫•y ƒë∆°n h√†ng' });
  }
};

// üîç Xem chi ti·∫øt ƒë∆°n h√†ng
module.exports.getOrderDetailByUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderId = req.params.id;
    const order = await orderModel.getOrderDetailByUser(orderId, userId);

    if (!order) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    res.json({ success: true, message: 'Chi ti·∫øt ƒë∆°n h√†ng', data: order });
  } catch (err) {
    console.error('‚ùå L·ªói getOrderDetailByUser:', err);
    res.status(500).json({ success: false, message: 'L·ªói server l·∫•y chi ti·∫øt ƒë∆°n h√†ng' });
  }
};

// üõí T·∫°o ƒë∆°n h√†ng (COD/MoMo)
module.exports.createOrderAndPay = async (req, res) => {
  const orderData = req.body;

  

  
  try {
      // =======================
    // ‚úÖ T√çNH T·ªîNG GI√Å + GI·∫¢M
    // =======================
 let tong_gia_truoc_giam = 0;

for (const sp of orderData.chi_tiet_san_pham) {
  const [rows] = await db.execute(`SELECT gia FROM san_pham WHERE id_san_pham = ?`, [sp.id_san_pham]);

  if (rows.length === 0) {
    return res.status(400).json({ message: `S·∫£n ph·∫©m v·ªõi ID ${sp.id_san_pham} kh√¥ng t·ªìn t·∫°i.` });
  }

  const gia = rows[0].gia;
  sp.gia = gia; // g√°n l·∫°i ƒë·ªÉ insert v√†o chi ti·∫øt ƒë∆°n h√†ng
  tong_gia_truoc_giam += gia * sp.so_luong;
}
let gia_tri_giam = 0;

if (orderData.ma_giam_gia?.trim()) {
  const ma = orderData.ma_giam_gia.trim();

  const [rows] = await db.execute(`
    SELECT * FROM giam_gia 
    WHERE ma_giam_gia = ? AND deleted = 0 AND trang_thai = 'active'
  `, [ma]);

  const giamGia = rows[0];
  if (!giamGia) return res.status(400).json({ message: 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá.' });

  const now = moment();

  if (now.isBefore(giamGia.ngay_bat_dau) || now.isAfter(giamGia.ngay_ket_thuc)) {
    return res.status(400).json({ message: 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a b·∫Øt ƒë·∫ßu.' });
  }

  if (giamGia.so_luong_con_lai <= 0) {
    return res.status(400).json({ message: 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng.' });
  }

  if (tong_gia_truoc_giam < giamGia.dieu_kien) {
    return res.status(400).json({ message: `ƒê∆°n h√†ng ph·∫£i t·ª´ ${giamGia.dieu_kien}ƒë ƒë·ªÉ d√πng m√£.` });
  }

  // T√≠nh gi√° tr·ªã gi·∫£m
  if (giamGia.loai === 'phan_tram') {
    gia_tri_giam = Math.floor(tong_gia_truoc_giam * giamGia.gia_tri / 100);
  } else {
    gia_tri_giam = giamGia.gia_tri;
  }

  // Tr·ª´ l∆∞·ª£t
  await db.execute(`
    UPDATE giam_gia 
    SET so_luong_con_lai = so_luong_con_lai - 1 
    WHERE id_giam_gia = ?
  `, [giamGia.id_giam_gia]);

  // G√°n id_giam_gia v√†o orderData ƒë·ªÉ l∆∞u ƒë∆°n h√†ng
  orderData.id_giam_gia = giamGia.id_giam_gia;
}

// ‚úÖ G√ÅN GI√Å TR·ªä V√ÄO orderData
orderData.tong_gia_truoc_giam = tong_gia_truoc_giam;
orderData.gia_tri_giam = gia_tri_giam;
orderData.tong_gia = tong_gia_truoc_giam - gia_tri_giam;
    // 1. T·∫°o ƒë∆°n h√†ng trong h·ªá th·ªëng
    const {orderId,momo_order_id} = await orderModel.createOrder(orderData);

    // 2. N·∫øu ch·ªçn thanh to√°n MoMo
    if (orderData.phuong_thuc_thanh_toan === 'momo') {
      const partnerCode = 'MOMO';
      const requestType = "payWithMethod";
      const amount = orderData.tong_gia.toString();
      const orderInfo = `Thanh to√°n ƒë∆°n h√†ng #${orderId}`;
      const redirectUrl = 'https://webhook.site/b3088a6a-2d17-4f8d-a383-71389a6c600b';

  var ipnUrl = 'https://ee7c-113-185-64-1.ngrok-free.app/order/momo/callback';
      // const momoOrderId = 'MOMO_' + Date.now(); // orderId g·ª≠i MoMo
      const requestId = 'REQ_' + Date.now();
      const extraData = '';const rawSignature = `accessKey=${accessKey}&amount=${amount}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${momo_order_id}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;

      const signature = crypto.createHmac('sha256', secretKey).update(rawSignature).digest('hex');

      const requestBody = {
        partnerCode,
        partnerName: "YourStore",
        storeId: "Store001",
        requestId,
        amount,
        orderId: momo_order_id,
        orderInfo,
        redirectUrl,
        ipnUrl,
        lang: 'vi',
        requestType,
        autoCapture: true,
        extraData,
        orderGroupId: '',
        signature
      };

      const momoRes = await axios.post('https://test-payment.momo.vn/v2/gateway/api/create', requestBody, {
        headers: { 'Content-Type': 'application/json' }
      });

      if (momoRes.data.resultCode !== 0) {
        // Xo√° ƒë∆°n h√†ng n·∫øu MoMo t·∫°o th·∫•t b·∫°i
        await orderModel.deleteOrder(orderId);
        return res.status(400).json({
          message: 'T·∫°o y√™u c·∫ßu thanh to√°n MoMo th·∫•t b·∫°i.',
          momoResponse: momoRes.data
        });
      }

      return res.status(200).json({
        message: 'ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. Vui l√≤ng thanh to√°n qua MoMo.',
        orderId,
        payUrl: momoRes.data.payUrl,
        momoResponse: momoRes.data
      });
    }

    // 3. N·∫øu ch·ªçn COD
    if (orderData.phuong_thuc_thanh_toan === 'cod') {
      return res.status(201).json({
        message: 'ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. Ph∆∞∆°ng th·ª©c thanh to√°n COD ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.',
        orderId
      });
    }

    // 4. Ph∆∞∆°ng th·ª©c kh√¥ng h·ª£p l·ªá
    return res.status(400).json({ message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.' });

  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng ho·∫∑c thanh to√°n:', err.message);
    return res.status(500).json({
      message: 'C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng.',
      error: err.message
    });
  }
};

// üóëÔ∏è Hu·ª∑ ƒë∆°n h√†ng
module.exports.cancelOrderByUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderId = req.params.id;
    await orderModel.cancelOrderByUser(orderId, userId);

    res.json({ success: true, message: 'Hu·ª∑ ƒë∆°n h√†ng th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói cancelOrderByUser:', err);
    res.status(400).json({ success: false, message: err.message });
  }
};

// üîÑ Mua l·∫°i ƒë∆°n h√†ng ‚Üí ƒê·∫©y sp v√†o gi·ªè h√†ng
module.exports.reorder = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderId = req.params.id;

    const items = await orderModel.getProductsFromOrder(orderId, userId);
    if (!items.length) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c ƒë∆°n kh√¥ng thu·ªôc v·ªÅ b·∫°n' });
    }

    const cart = await cartModel.createCart(userId);

    for (const item of items) {
      await cartModel.addItemToCart(cart.id_gio_hang, item.id_san_pham, item.so_luong);
    }

    res.json({ success: true, message: 'ƒê√£ t·∫°o gi·ªè h√†ng m·ªõi v√† th√™m s·∫£n ph·∫©m t·ª´ ƒë∆°n h√†ng v√†o gi·ªè.' });
  } catch (err) {
    console.error('‚ùå L·ªói reorder:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi mua l·∫°i ƒë∆°n h√†ng' });
  }
};

// ‚≠ê ƒê√°nh gi√° s·∫£n ph·∫©m (ch·ªâ khi thanh to√°n th√†nh c√¥ng & ƒë√£ giao)
module.exports.reviewProduct = async (req, res) => {
  try {
    const userId = req.user.id;
    const productId = req.params.id; // id_san_pham
    const { diem_so, nhan_xet } = req.body;

    await orderModel.addReview(productId, userId, diem_so, nhan_xet);

    res.json({ success: true, message: 'ƒê√°nh gi√° s·∫£n ph·∫©m th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói reviewProduct:', err);
    res.status(400).json({ success: false, message: err.message });
  }
};

// üì© Callback MoMo
// exports.momoCallback = async (req, res) => {
//   try {
//     const { orderId, resultCode, message, amount } = req.body;
//     console.log('üì© MoMo Callback:', req.body);

//     if (resultCode === 0) {
//       await orderModel.markOrderPaid(orderId, amount, 'MoMo');
//       return res.json({ success: true, message: 'Thanh to√°n th√†nh c√¥ng' });
//     } else {
//       await orderModel.markOrderFailed(orderId);
//       return res.status(400).json({ success: false, message: `Thanh to√°n th·∫•t b·∫°i: ${message}` });
//     }
//   } catch (err) {
//     console.error('‚ùå L·ªói momoCallback:', err);
//     res.status(500).json({ success: false, message: 'L·ªói x·ª≠ l√Ω callback MoMo' });
//   }
// };
module.exports.callback = async (req, res) => {
  // console.log("callback:::");
  // res.send('ok');
    console.log('--- CALLBACK MO MO ƒê∆Ø·ª¢C G·ªåI ---', req.method, req.path);

  const {
    orderId,    // ƒê√¢y l√† momo_order_id
    amount,
    resultCode,
    message,
    transId,
  } = req.body;

  console.log('üì• Callback MoMo nh·∫≠n:', req.body);

  try {
    if (resultCode === 0) {
      // 1. T√¨m ƒë∆°n h√†ng d·ª±a v√†o momo_order_id
      const [orders] = await db.query(
        'SELECT * FROM don_hang WHERE momo_order_id = ?',
        [orderId]
      );

      if (orders.length === 0) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi momo_order_id n√†y',
        });
      }

      const order = orders[0];
      const idDonHang = order.id_don_hang;

      // 2. Ki·ªÉm tra thanh to√°n
      const [existingPayment] = await db.query(
        'SELECT * FROM thanh_toan WHERE id_don_hang = ? AND phuong_thuc = ?',
        [idDonHang, 'MoMo']
      );

      if (existingPayment.length === 0) {
        await db.query(
          `INSERT INTO thanh_toan 
            (id_don_hang, so_tien, phuong_thuc, trang_thai, ngay_thanh_toan) 
           VALUES (?, ?, 'MoMo', 'ƒê√£ thanh to√°n', NOW())`,
          [idDonHang, amount]
        );
        console.log('‚úÖ Insert thanh to√°n.');
      } else {
        await db.query(
          `UPDATE thanh_toan 
           SET trang_thai = 'ƒê√£ thanh to√°n', ngay_thanh_toan = NOW()
           WHERE id_don_hang = ? AND phuong_thuc = 'MoMo'`,
          [idDonHang]
        );
        console.log('üîÅ Update thanh to√°n.');
      }

      // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      if (order.trang_thai !== 'ƒê√£ giao' || order.trang_thai_thanh_toan !== 'ƒê√£ thanh to√°n') {
        await db.query(
          `UPDATE don_hang 
           SET trang_thai = ?, trang_thai_thanh_toan = ?, phuong_thuc_thanh_toan = ? 
           WHERE id_don_hang = ?`,
          ['ƒê√£ giao', 'ƒê√£ thanh to√°n', 'MoMo', idDonHang]
        );
        console.log('üì¶ C·∫≠p nh·∫≠t ƒë∆°n h√†ng.');
      } else {
        console.log('‚ÑπÔ∏è ƒê∆°n h√†ng ƒë√£ ·ªü tr·∫°ng th√°i ch√≠nh x√°c.');
      }

      // 4. L∆∞u l·ªãch s·ª≠
      await db.query(
        `INSERT INTO lich_su_don_hang (id_don_hang, thoi_gian, trang_thai, mo_ta)
         VALUES (?, NOW(), ?, ?)`,
        [idDonHang, 'ƒê√£ giao', 'Thanh to√°n MoMo th√†nh c√¥ng, c·∫≠p nh·∫≠t ƒë∆°n h√†ng']
      );

      return res.status(200).json({
        success: true,
        message: 'ƒê√£ x·ª≠ l√Ω callback MoMo th√†nh c√¥ng',
      });
    } else {
      return res.status(400).json({
        success: false,
        message: `Thanh to√°n th·∫•t b·∫°i: ${message}`,
        resultCode,
      });
    }
  } catch (error) {
    console.error('‚ùå Callback MoMo l·ªói:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói khi x·ª≠ l√Ω callback MoMo',
      error: error.message
    });
  }
};