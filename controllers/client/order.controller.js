const orderModel = require('../../modal/client/order.model');
const cartModel = require('../../modal/client/cart.model');
const crypto = require('crypto');
const axios = require('axios');

const secretKey = 'K951B6PE1waDMi640xX08PD3vg6EkVlz';
const accessKey = 'F8BBA842ECF85';

// üì• L·∫•y danh s√°ch ƒë∆°n h√†ng (c√≥ l·ªçc tr·∫°ng th√°i)
exports.getOrdersByUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const { status } = req.query; // ?status=ƒê√£ giao
    const orders = await orderModel.getOrdersByUserId(userId, status);

    res.json({ success: true, message: 'Danh s√°ch ƒë∆°n h√†ng', data: orders });
  } catch (err) {
    console.error('‚ùå L·ªói getOrdersByUser:', err);
    res.status(500).json({ success: false, message: 'L·ªói server l·∫•y ƒë∆°n h√†ng' });
  }
};

// üîç Xem chi ti·∫øt ƒë∆°n h√†ng
exports.getOrderDetailByUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderId = req.params.id;
    const order = await orderModel.getOrderDetailByUser(orderId, userId);

    if (!order) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }

    res.json({ success: true, message: 'Chi ti·∫øt ƒë∆°n h√†ng', data: order });
  } catch (err) {
    console.error('‚ùå L·ªói getOrderDetailByUser:', err);
    res.status(500).json({ success: false, message: 'L·ªói server l·∫•y chi ti·∫øt ƒë∆°n h√†ng' });
  }
};

// üõí T·∫°o ƒë∆°n h√†ng (COD/MoMo)
exports.createOrderAndPay = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderData = req.body;
    orderData.user_id = userId;

    const { orderId, momo_order_id } = await orderModel.createOrder(orderData);

    if (orderData.phuong_thuc_thanh_toan === 'momo') {
      const partnerCode = 'MOMO';
      const requestType = "payWithMethod";
      const amount = orderData.tong_gia.toString();
      const orderInfo = `Thanh to√°n ƒë∆°n h√†ng #${orderId}`;
      const redirectUrl = 'https://your-app.com/payment/success';
      const ipnUrl = 'https://your-backend.com/user/order/momo/callback';
      const requestId = 'REQ_' + Date.now();
      const extraData = '';

      const rawSignature = `accessKey=${accessKey}&amount=${amount}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${momo_order_id}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;
      const signature = crypto.createHmac('sha256', secretKey).update(rawSignature).digest('hex');

      const requestBody = {
        partnerCode, partnerName: "FastFoodApp", storeId: "Store001",
        requestId, amount, orderId: momo_order_id, orderInfo, redirectUrl, ipnUrl,
        lang: 'vi', requestType, autoCapture: true, extraData, signature
      };

      const momoRes = await axios.post('https://test-payment.momo.vn/v2/gateway/api/create', requestBody);

      if (momoRes.data.resultCode !== 0) {
        await orderModel.cancelOrderByUser(orderId, userId);
        return res.status(400).json({ success: false, message: 'T·∫°o thanh to√°n MoMo th·∫•t b·∫°i', momoResponse: momoRes.data });
      }

      return res.status(201).json({
        success: true,
        message: 'ƒê∆°n h√†ng t·∫°o th√†nh c√¥ng, chuy·ªÉn ƒë·∫øn MoMo ƒë·ªÉ thanh to√°n',
        data: { orderId, payUrl: momoRes.data.payUrl }
      });
    }

    res.status(201).json({ success: true, message: 'ƒê∆°n h√†ng COD t·∫°o th√†nh c√¥ng', data: { orderId } });
  } catch (err) {
    console.error('‚ùå L·ªói createOrderAndPay:', err);
    res.status(500).json({ success: false, message: 'L·ªói server t·∫°o ƒë∆°n h√†ng' });
  }
};

// üóëÔ∏è Hu·ª∑ ƒë∆°n h√†ng
exports.cancelOrderByUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderId = req.params.id;
    await orderModel.cancelOrderByUser(orderId, userId);

    res.json({ success: true, message: 'Hu·ª∑ ƒë∆°n h√†ng th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói cancelOrderByUser:', err);
    res.status(400).json({ success: false, message: err.message });
  }
};

// üîÑ Mua l·∫°i ƒë∆°n h√†ng ‚Üí ƒê·∫©y sp v√†o gi·ªè h√†ng
exports.reorder = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderId = req.params.id;

    const items = await orderModel.getProductsFromOrder(orderId, userId);
    if (!items.length) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c ƒë∆°n kh√¥ng thu·ªôc v·ªÅ b·∫°n' });
    }

    const cart = await cartModel.createCart(userId);

    for (const item of items) {
      await cartModel.addItemToCart(cart.id_gio_hang, item.id_san_pham, item.so_luong);
    }

    res.json({ success: true, message: 'ƒê√£ t·∫°o gi·ªè h√†ng m·ªõi v√† th√™m s·∫£n ph·∫©m t·ª´ ƒë∆°n h√†ng v√†o gi·ªè.' });
  } catch (err) {
    console.error('‚ùå L·ªói reorder:', err);
    res.status(500).json({ success: false, message: 'L·ªói server khi mua l·∫°i ƒë∆°n h√†ng' });
  }
};

// ‚≠ê ƒê√°nh gi√° s·∫£n ph·∫©m (ch·ªâ khi thanh to√°n th√†nh c√¥ng & ƒë√£ giao)
exports.reviewProduct = async (req, res) => {
  try {
    const userId = req.user.id;
    const productId = req.params.id; // id_san_pham
    const { diem_so, nhan_xet } = req.body;

    await orderModel.addReview(productId, userId, diem_so, nhan_xet);

    res.json({ success: true, message: 'ƒê√°nh gi√° s·∫£n ph·∫©m th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói reviewProduct:', err);
    res.status(400).json({ success: false, message: err.message });
  }
};

// üì© Callback MoMo
exports.momoCallback = async (req, res) => {
  try {
    const { orderId, resultCode, message, amount } = req.body;
    console.log('üì© MoMo Callback:', req.body);

    if (resultCode === 0) {
      await orderModel.markOrderPaid(orderId, amount, 'MoMo');
      return res.json({ success: true, message: 'Thanh to√°n th√†nh c√¥ng' });
    } else {
      await orderModel.markOrderFailed(orderId);
      return res.status(400).json({ success: false, message: `Thanh to√°n th·∫•t b·∫°i: ${message}` });
    }
  } catch (err) {
    console.error('‚ùå L·ªói momoCallback:', err);
    res.status(500).json({ success: false, message: 'L·ªói x·ª≠ l√Ω callback MoMo' });
  }
};
