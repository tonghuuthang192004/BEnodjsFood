  const orderModel = require('../../modal/client/order.model');
  const cartModel = require('../../modal/client/cart.model');
  const crypto = require('crypto');
  const axios = require('axios');
  const db = require("../../config/database");
  const moment = require("moment");

  const secretKey = 'K951B6PE1waDMi640xX08PD3vg6EkVlz'; // ƒë·ªïi theo b·∫°n
  const accessKey = 'F8BBA842ECF85'; // ƒë·ªïi theo b·∫°n

  // üì• L·∫•y danh s√°ch ƒë∆°n h√†ng
  module.exports.getOrdersByUser = async (req, res) => {
    try {
      const userId = req.user.id;
      const { status } = req.query;
      const orders = await orderModel.getOrdersByUserId(userId, status);

      res.json({ success: true, message: 'Danh s√°ch ƒë∆°n h√†ng', data: orders });
    } catch (err) {
      console.error('‚ùå L·ªói getOrdersByUser:', err);
      res.status(500).json({ success: false, message: 'L·ªói server l·∫•y ƒë∆°n h√†ng' });
    }
  };

  // üîç Xem chi ti·∫øt ƒë∆°n h√†ng - ch·ªâ tr·∫£ v·ªÅ m·∫£ng chi ti·∫øt s·∫£n ph·∫©m
module.exports.getOrderDetailByUser = async (req, res) => {
  try {
    const userId = req.user.id;
    const orderId = req.params.id;

    // Thay v√¨ g·ªçi getProductsFromOrder, g·ªçi ƒë√∫ng h√†m l·∫•y s·∫£n ph·∫©m chi ti·∫øt
    const products = await orderModel.getOrderProductsByUser(orderId, userId);

    if (!products || products.length === 0) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong ƒë∆°n h√†ng ho·∫∑c kh√¥ng thu·ªôc v·ªÅ b·∫°n.' });
    }

    return res.json({
      success: true,
      message: 'Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng',
      data: products
    });
  } catch (err) {
    console.error('‚ùå L·ªói getOrderDetailByUser:', err);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server l·∫•y chi ti·∫øt ƒë∆°n h√†ng'
    });
  }
};



  // üõí T·∫°o ƒë∆°n h√†ng (COD/MoMo)
  module.exports.createOrderAndPay = async (req, res) => {
  const orderData = req.body;

  try {
    const userId = req.user.id;

    // üõí L·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng
    const [cartItems] = await db.query(`
      SELECT gct.id_san_pham, gct.so_luong, sp.gia
      FROM gio_hang_chi_tiet gct
      JOIN gio_hang gh ON gct.id_gio_hang = gh.id_gio_hang
      JOIN san_pham sp ON gct.id_san_pham = sp.id_san_pham
      WHERE gh.id_nguoi_dung = ? AND gct.deleted = 0
    `, [userId]);

    if (cartItems.length === 0) {
      return res.status(400).json({ success: false, message: 'Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ t·∫°o ƒë∆°n.' });
    }

    // üí∞ T√≠nh t·ªïng gi√° v√† gi·∫£m gi√°
    let tong_gia_truoc_giam = 0;
    cartItems.forEach(item => {
      tong_gia_truoc_giam += item.gia * item.so_luong;
    });

    let gia_tri_giam = 0;
    let id_giam_gia = null;

    if (orderData.ma_giam_gia?.trim()) {
      const ma = orderData.ma_giam_gia.trim();

      const [rows] = await db.execute(`
        SELECT * FROM giam_gia
        WHERE ma_giam_gia = ? AND deleted = 0 AND trang_thai = 'active'
      `, [ma]);

      const giamGia = rows[0];
      if (!giamGia) {
        return res.status(400).json({ success: false, message: 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá.' });
      }

      const now = moment();
      if (now.isBefore(giamGia.ngay_bat_dau) || now.isAfter(giamGia.ngay_ket_thuc)) {
        return res.status(400).json({ success: false, message: 'M√£ gi·∫£m gi√° h·∫øt h·∫°n ho·∫∑c ch∆∞a b·∫Øt ƒë·∫ßu.' });
      }

      if (giamGia.so_luong_con_lai <= 0) {
        return res.status(400).json({ success: false, message: 'M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t.' });
      }

      if (tong_gia_truoc_giam < giamGia.dieu_kien) {
        return res.status(400).json({ success: false, message: `ƒê∆°n h√†ng ph·∫£i t·ª´ ${giamGia.dieu_kien}ƒë ƒë·ªÉ √°p d·ª•ng m√£.` });
      }

      gia_tri_giam = giamGia.loai === 'phan_tram'
        ? Math.floor(tong_gia_truoc_giam * giamGia.gia_tri / 100)
        : giamGia.gia_tri;

      await db.execute(`
        UPDATE giam_gia
        SET so_luong_con_lai = so_luong_con_lai - 1
        WHERE id_giam_gia = ?
      `, [giamGia.id_giam_gia]);

      id_giam_gia = giamGia.id_giam_gia;
    }

    const tong_gia = tong_gia_truoc_giam - gia_tri_giam;

    // üì¶ T·∫°o ƒë∆°n h√†ng
    orderData.id_nguoi_dung = userId;
    orderData.tong_gia_truoc_giam = tong_gia_truoc_giam;
    orderData.gia_tri_giam = gia_tri_giam;
    orderData.tong_gia = tong_gia;
    orderData.id_giam_gia = id_giam_gia;

    const { orderId, momo_order_id } = await orderModel.createOrder(orderData);

    // üóëÔ∏è Xo√° gi·ªè h√†ng
    await db.query(`
      DELETE gct FROM gio_hang_chi_tiet gct
      JOIN gio_hang gh ON gct.id_gio_hang = gh.id_gio_hang
      WHERE gh.id_nguoi_dung = ?
    `, [userId]);

    // üí≥ Thanh to√°n MoMo
    if (orderData.phuong_thuc_thanh_toan === 'momo') {
      try {
        const partnerCode = 'MOMO';
       const requestType =
  process.env.NODE_ENV === 'production' ? 'payWithMethod' : 'captureWallet';

        const amount = tong_gia.toString();
        const orderInfo = `Thanh to√°n ƒë∆°n h√†ng #${orderId}`;
        const redirectUrl = 'https://webhook.site/b3088a6a-2d17-4f8d-a383-71389a6c600b';
        const ipnUrl = 'https://c4eb-115-74-130-106.ngrok-free.app/order/momo/callback';
        const requestId = 'REQ_' + Date.now();
        const extraData = '';

        const rawSignature = `accessKey=${accessKey}&amount=${amount}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${momo_order_id}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;
        const signature = crypto.createHmac('sha256', secretKey).update(rawSignature).digest('hex');

        const requestBody = {
          partnerCode,
          requestId,
          amount,
          orderId: momo_order_id,
          orderInfo,
          redirectUrl,
          ipnUrl,
          requestType,
          extraData,
          signature
        };

        const momoRes = await axios.post('https://test-payment.momo.vn/v2/gateway/api/create', requestBody, {
          headers: { 'Content-Type': 'application/json' }
        });

        if (momoRes.data.resultCode !== 0) {
          await orderModel.deleteOrder(orderId);
          return res.status(400).json({
            success: false,
            message: 'T·∫°o y√™u c·∫ßu thanh to√°n MoMo th·∫•t b·∫°i.',
            momoResponse: momoRes.data
          });
        }

        return res.status(200).json({
          success: true,
          message: 'ƒê∆°n h√†ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. Vui l√≤ng thanh to√°n qua MoMo.',
          orderId,
          payUrl: momoRes.data.payUrl
        });
      } catch (momoError) {
        await orderModel.deleteOrder(orderId);
        console.error('‚ùå L·ªói MoMo API:', momoError.message);
        return res.status(500).json({
          success: false,
          message: 'L·ªói khi t·∫°o y√™u c·∫ßu thanh to√°n MoMo.',
          error: momoError.message
        });
      }
    }

    // üíµ Thanh to√°n COD
    if (orderData.phuong_thuc_thanh_toan === 'cod') {
      return res.status(201).json({
        success: true,
        message: 'ƒê∆°n h√†ng COD t·∫°o th√†nh c√¥ng.',
        orderId
      });
    }

    // ‚ùå Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá
    return res.status(400).json({ success: false, message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.' });
  } catch (err) {
    console.error('‚ùå L·ªói createOrderAndPay:', err);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t·∫°o ƒë∆°n h√†ng.',
      error: err.message
    });
  }
};


  // üóëÔ∏è Hu·ª∑ ƒë∆°n h√†ng
  module.exports.cancelOrderByUser = async (req, res) => {
    try {
      const userId = req.user.id;
      const orderId = req.params.id;

      const success = await orderModel.cancelOrderByUser(orderId, userId);
      if (!success) {
        return res.status(400).json({ success: false, message: 'Kh√¥ng th·ªÉ hu·ª∑ ƒë∆°n h√†ng n√†y.' });
      }

      res.json({ success: true, message: 'Hu·ª∑ ƒë∆°n h√†ng th√†nh c√¥ng.' });
    } catch (err) {
      console.error('‚ùå L·ªói cancelOrderByUser:', err);
      res.status(500).json({ success: false, message: 'L·ªói server khi hu·ª∑ ƒë∆°n h√†ng.' });
    }
  };

  // üîÑ Mua l·∫°i ƒë∆°n h√†ng
  module.exports.reorder = async (req, res) => {
    try {
      const userId = req.user.id;
      const orderId = req.params.id;

      const items = await orderModel.getProductsFromOrder(orderId, userId);
      if (!items.length) {
        return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c kh√¥ng thu·ªôc v·ªÅ b·∫°n.' });
      }

      const cart = await cartModel.createCart(userId);
      for (const item of items) {
        await cartModel.addItemToCart(cart.id_gio_hang, item.id_san_pham, item.so_luong);
      }

      res.json({ success: true, message: 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m l·∫°i v√†o gi·ªè h√†ng.' });
    } catch (err) {
      console.error('‚ùå L·ªói reorder:', err);
      res.status(500).json({ success: false, message: 'L·ªói khi mua l·∫°i ƒë∆°n h√†ng.' });
    }
  };

  // ‚≠ê ƒê√°nh gi√° s·∫£n ph·∫©m
 module.exports.reviewProduct = async (req, res) => {
  try {
    const userId = req.user.id;
    const productId = req.params.id;
    const { diem_so, nhan_xet } = req.body;

    // Validate ƒë·∫ßu v√†o ngay controller, tr√°nh g·ªçi h√†m addReview khi d·ªØ li·ªáu sai
    if (!diem_so || diem_so < 1 || diem_so > 5) {
      return res.status(400).json({ success: false, message: 'ƒêi·ªÉm s·ªë ph·∫£i t·ª´ 1 ƒë·∫øn 5' });
    }
    if (!nhan_xet || nhan_xet.trim().length === 0) {
      return res.status(400).json({ success: false, message: 'Vui l√≤ng nh·∫≠p nh·∫≠n x√©t' });
    }

    await orderModel.addReview(productId, userId, diem_so, nhan_xet.trim());

    res.json({ success: true, message: 'ƒê√°nh gi√° th√†nh c√¥ng.' });
  } catch (err) {
    console.error('‚ùå L·ªói reviewProduct:', err);
    res.status(500).json({ success: false, message: err.message });
  }
};


  // üì© Callback t·ª´ MoMo
  module.exports.callback = async (req, res) => {
    const { orderId, amount, resultCode, message } = req.body;

    try {
      if (resultCode === 0) {
        await orderModel.markOrderPaid(orderId, amount, 'MoMo');
        res.json({ success: true, message: 'Thanh to√°n th√†nh c√¥ng.' });
      } else {
        await orderModel.markOrderFailed(orderId);
        res.status(400).json({ success: false, message: `Thanh to√°n th·∫•t b·∫°i: ${message}` });
      }
    } catch (err) {
      console.error('‚ùå Callback MoMo l·ªói:', err);
      res.status(500).json({ success: false, message: 'L·ªói x·ª≠ l√Ω callback MoMo.' });
    }
  };

  // üì• L·∫•y t·∫•t c·∫£ ƒë√°nh gi√°
  module.exports.getReviews = async (req, res) => {
    try {
      const productId = req.params.id;
      const reviews = await orderModel.getReviewsByProductId(productId);

      res.status(200).json({
        success: true,
        message: 'Danh s√°ch ƒë√°nh gi√°',
        data: reviews
      });
    } catch (err) {
      console.error('‚ùå L·ªói getReviews:', err);
      res.status(500).json({ success: false, message: 'L·ªói l·∫•y ƒë√°nh gi√°.' });
    }
  };

  // üì• L·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng c·ªßa user
module.exports.getOrderHistoriesByUser = async (req, res) => {
  try {
    console.log('üìå [getOrderHistoriesByUser] req.user:', req.user);

    if (!req.user || !req.user.id) {
      console.error('‚ùå Middleware kh√¥ng g·∫Øn user ho·∫∑c token sai');
      return res.status(401).json({
        success: false,
        message: 'Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá'
      });
    }

    const userId = req.user.id;

    // üì• L·∫•y status t·ª´ query params
    const status = req.query.status;
    console.log('üì• [getOrderHistoriesByUser] Filter tr·∫°ng th√°i:', status);

    // G·ªçi model v·ªõi userId v√† status
    const histories = await orderModel.getOrderHistoriesByUser(userId, status);

    console.log('üì¶ [getOrderHistoriesByUser] D·ªØ li·ªáu tr·∫£ v·ªÅ:', histories);

    return res.status(200).json({
      success: true,
      message: 'Danh s√°ch l·ªãch s·ª≠ ƒë∆°n h√†ng',
      data: histories
    });

  } catch (err) {
    console.error('‚ùå [getOrderHistoriesByUser] L·ªói server:', err.message);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng'
    });
  }
};



